import java.util.Arrays;

public class PolyMorphismSorting {
    public static void main(String[] args) {
        Contact[] friends = new Contact[8];
        friends[0] = new Contact("John", "Smith", "610-555-7384");
        friends[1] = new Contact("Sarah", "Barnes", "215-555-3827");
        friends[2] = new Contact("Mark", "Riley", "733-555-2969");
        friends[3] = new Contact("Laura", "Getz", "663-555-3984");
        friends[4] = new Contact("Larry", "Smith", "464-555-3489");
        friends[5] = new Contact("Frank", "Phelps", "322-555-2284");
        friends[6] = new Contact("Mario", "Guzman", "804-555-9066");
        friends[7] = new Contact("Marsha", "Grant", "243-555-2837");

        // Sorting by phone number using polymorphic selection sort
        Sorting.selectionSort(friends);
        System.out.println("*** Selection Sort (by Phone Number) ***");
        for (Contact friend : friends) {
            System.out.println(friend);
        }

        // Sorting by phone number using polymorphic insertion sort
        Sorting.insertionSort(friends);
        System.out.println("\n*** Insertion Sort (by Phone Number) ***");
        for (Contact friend : friends) {
            System.out.println(friend);
        }

        // Alternative: Using Java's built-in Arrays.sort() which also uses polymorphism
        Arrays.sort(friends);
        System.out.println("\n*** Arrays.sort() (by Phone Number) ***");
        for (Contact friend : friends) {
            System.out.println(friend);
        }
    }
}

class Sorting {
    public static <T extends Comparable<T>> void selectionSort(T[] list) {
        int min;
        T temp;
        for (int index = 0; index < list.length - 1; index++) {
            min = index;
            for (int scan = index + 1; scan < list.length; scan++) {
                if (list[scan].compareTo(list[min]) < 0) {
                    min = scan;
                }
            }
            // Swap values
            temp = list[min];
            list[min] = list[index];
            list[index] = temp;
        }
    }

    public static <T extends Comparable<T>> void insertionSort(T[] list) {
        for (int index = 1; index < list.length; index++) {
            T key = list[index];
            int position = index;

            while (position > 0 && key.compareTo(list[position - 1]) < 0) {
                list[position] = list[position - 1];
                position--;
            }
            list[position] = key;
        }
    }
}

class Contact implements Comparable<Contact> {
    private String firstName, lastName, phone;

    public Contact(String first, String last, String telephone) {
        firstName = first;
        lastName = last;
        phone = telephone;
    }

    public String toString() {
        return lastName + ", " + firstName + "\t" + phone;
    }

    public boolean equals(Object other) {
        if (other instanceof Contact) {
            Contact otherContact = (Contact) other;
            return lastName.equals(otherContact.getLastName()) &&
                   firstName.equals(otherContact.getFirstName()) &&
                   phone.equals(otherContact.getPhone());
        }
        return false;
    }

    // Now we use compareTo() polymorphically for sorting by phone number
    @Override
    public int compareTo(Contact other) {
        return this.phone.compareTo(other.phone);
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public String getPhone() {
        return phone;
    }
}
