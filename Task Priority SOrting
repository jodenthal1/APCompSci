import java.util.*;


// Priority Interface
interface Priority {
    void setPriority(int priority);
    int getPriority();
}

// Complexity Interface
interface Complexity {
    void setComplexity(int complexity);
    int getComplexity();
}

// Task Class
 class Task implements Priority, Complexity, Comparable<Task> {
    private String name;
    private int priority;
    private int complexity;

    // Constructor
    public Task(String name, int priority, int complexity) {
        this.name = name;
        this.priority = priority;
        this.complexity = complexity;
    }

    // Implementing Priority
    @Override
    public void setPriority(int priority) {
        this.priority = priority;
    }

    @Override
    public int getPriority() {
        return priority;
    }

    // Implementing Complexity
    @Override
    public void setComplexity(int complexity) {
        this.complexity = complexity;
    }

    @Override
    public int getComplexity() {
        return complexity;
    }

    // Implementing Comparable
    @Override
    public int compareTo(Task other) {
        // Compare by priority first
        if (this.priority != other.priority) {
            return Integer.compare(this.priority, other.priority);
        }
        // If priorities are equal, compare by complexity
        return Integer.compare(this.complexity, other.complexity);
    }

    @Override
    public String toString() {
        return "Task{name='" + name + "', priority=" + priority + ", complexity=" + complexity + "}";
    }
}

public class TaskPrioritySorting {
    
    // Main Method (Driver)
    public static void main(String[] args) {
        // Create a list of tasks
        List<Task> tasks = new ArrayList<>();
        tasks.add(new Task("Task 1", 3, 5));
        tasks.add(new Task("Task 2", 1, 7));
        tasks.add(new Task("Task 3", 2, 4));
        tasks.add(new Task("Task 4", 1, 3));

        // Print tasks before sorting
        System.out.println("Tasks before sorting:");
        for (Task task : tasks) {
            System.out.println(task);
        }

        // Sort tasks by priority and complexity
        Collections.sort(tasks);

        // Print tasks after sorting
        System.out.println("\nTasks after sorting by priority and complexity:");
        for (Task task : tasks) {
            System.out.println(task);
        }
    }
}
